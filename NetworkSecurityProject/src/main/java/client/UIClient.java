package client;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.security.PrivateKey;
import java.security.PublicKey;
import javax.crypto.SecretKey;

import java.util.HashMap;
import java.util.Map;
import java.net.URL;
import java.io.OutputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;

import com.google.gson.Gson;
import java.nio.file.Files;
import java.nio.file.Paths;
import javax.net.ssl.*;

public class UIClient {

    private JFrame frame; // C·ª≠a s·ªï ch√≠nh
    private JTextField privateKeyField; // √î nh·∫≠p ƒë∆∞·ªùng d·∫´n kh√≥a ri√™ng
    private JTextField publicKeyField;  // √î nh·∫≠p ƒë∆∞·ªùng d·∫´n kh√≥a c√¥ng khai
    private JTextArea messageArea; // √î nh·∫≠p n·ªôi dung tin nh·∫Øn
    private JTextArea resultArea;  // √î hi·ªÉn th·ªã ph·∫£n h·ªìi t·ª´ server

    public void showUI() {
        frame = new JFrame("Client UI - G·ª≠i tin nh·∫Øn an to√†n"); // T·∫°o c·ª≠a s·ªï
        frame.setSize(700, 600); // K√≠ch th∆∞·ªõc c·ª≠a s·ªï
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // T·∫Øt ch∆∞∆°ng tr√¨nh khi ƒë√≥ng

        JPanel panel = new JPanel(new BorderLayout(10, 10)); // Panel ch√≠nh, layout Border

        // Panel nh·∫≠p li·ªáu (tr√™n c√πng)
        JPanel inputPanel = new JPanel(new GridLayout(6, 1)); // Grid layout 6 h√†ng

        // D√≤ng nh·∫≠p private key
        JPanel privateKeyPanel = new JPanel(new BorderLayout());
        privateKeyField = new JTextField(); // Tr∆∞·ªùng nh·∫≠p ƒë∆∞·ªùng d·∫´n
        JButton browsePrivateBtn = new JButton("Browse..."); // N√∫t ch·ªçn file
        browsePrivateBtn.addActionListener(e -> browseFile(privateKeyField)); // G·∫Øn s·ª± ki·ªán
        privateKeyPanel.add(privateKeyField, BorderLayout.CENTER);
        privateKeyPanel.add(browsePrivateBtn, BorderLayout.EAST);

        // D√≤ng nh·∫≠p public key
        JPanel publicKeyPanel = new JPanel(new BorderLayout());
        publicKeyField = new JTextField();
        JButton browsePublicBtn = new JButton("Browse...");
        browsePublicBtn.addActionListener(e -> browseFile(publicKeyField));
        publicKeyPanel.add(publicKeyField, BorderLayout.CENTER);
        publicKeyPanel.add(browsePublicBtn, BorderLayout.EAST);

        messageArea = new JTextArea("Nh·∫≠p message t·∫°i ƒë√¢y...", 3, 50); // Nh·∫≠p tin nh·∫Øn

        // Th√™m th√†nh ph·∫ßn v√†o inputPanel
        inputPanel.add(new JLabel("ƒê∆∞·ªùng d·∫´n private key (.pem):"));
        inputPanel.add(privateKeyPanel);
        inputPanel.add(new JLabel("ƒê∆∞·ªùng d·∫´n public key (.pem):"));
        inputPanel.add(publicKeyPanel);
        inputPanel.add(new JLabel("Message:"));
        inputPanel.add(new JScrollPane(messageArea));

        // N√∫t g·ª≠i
        JButton sendBtn = new JButton("G·ª≠i t·ªõi Server");
        sendBtn.addActionListener(this::handleSend); // G·∫Øn h√†m g·ª≠i

        // V√πng hi·ªÉn th·ªã k·∫øt qu·∫£ (·ªü d∆∞·ªõi)
        resultArea = new JTextArea(10, 50);
        resultArea.setEditable(false); // Kh√¥ng cho s·ª≠a
        resultArea.setLineWrap(true); // T·ª± xu·ªëng d√≤ng

        // G·∫Øn c√°c panel v√†o frame
        panel.add(inputPanel, BorderLayout.NORTH); // Tr√™n
        panel.add(sendBtn, BorderLayout.CENTER);   // Gi·ªØa
        panel.add(new JScrollPane(resultArea), BorderLayout.SOUTH); // D∆∞·ªõi

        frame.add(panel); // G·∫Øn panel v√†o frame
        frame.setVisible(true); // Hi·ªÉn th·ªã giao di·ªán
    }

    // M·ªü c·ª≠a s·ªï ch·ªçn file v√† g√°n ƒë∆∞·ªùng d·∫´n v√†o √¥ nh·∫≠p
    private void browseFile(JTextField targetField) {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(frame);
        if (result == JFileChooser.APPROVE_OPTION) {
            String path = fileChooser.getSelectedFile().getAbsolutePath();
            targetField.setText(path); // G√°n v√†o text field
        }
    }

    // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi d√πng b·∫•m "G·ª≠i t·ªõi Server"
    private void handleSend(ActionEvent e) {
        try {
            String privateKeyPath = privateKeyField.getText().trim();
            String publicKeyPath = publicKeyField.getText().trim();
            String rawMessage = messageArea.getText().trim();

            // Ki·ªÉm tra nh·∫≠p ƒë·ªß ƒë∆∞·ªùng d·∫´n
            if (privateKeyPath.isEmpty() || publicKeyPath.isEmpty()) {
                resultArea.setText("‚ùå INVALID: B·∫°n ph·∫£i nh·∫≠p ƒë·∫ßy ƒë·ªß ƒë∆∞·ªùng d·∫´n private v√† public key.");
                return;
            }

            // Ki·ªÉm tra file t·ªìn t·∫°i
            if (!Files.exists(Paths.get(privateKeyPath)) || !Files.exists(Paths.get(publicKeyPath))) {
                resultArea.setText("‚ùå INVALID: File kh√≥a kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.");
                return;
            }

            // ƒê·ªçc kh√≥a v√† k√Ω message
            PrivateKey privateKey = CryptoUtils.loadPrivateKey(privateKeyPath);
            PublicKey publicKey = CryptoUtils.loadPublicKey(publicKeyPath);
            String signature = CryptoUtils.signMessage(rawMessage, privateKey); // K√Ω tin nh·∫Øn

            SecretKey aesKey = CryptoUtils.generateAESKey(); // T·∫°o kh√≥a AES
            byte[] iv = CryptoUtils.generateIV(); // Sinh IV ng·∫´u nhi√™n

            String publicKeyPEM = CryptoUtils.encodePublicKey(publicKey); // Convert public key sang base64
            String encryptedPublicKey = CryptoUtils.encryptAES(publicKeyPEM, aesKey, iv); // M√£ h√≥a b·∫±ng AES

            // T·∫°o JSON g·ª≠i l√™n server
            Map<String, String> jsonMap = new HashMap<>();
            jsonMap.put("raw_message", rawMessage);
            jsonMap.put("signed_message", signature);
            jsonMap.put("encrypted_public_key", encryptedPublicKey);
            jsonMap.put("key", CryptoUtils.encodeKey(aesKey));
            jsonMap.put("iv", CryptoUtils.encodeIV(iv));

            Gson gson = new Gson();
            String jsonPayload = gson.toJson(jsonMap); // Chuy·ªÉn sang chu·ªói JSON

            // B·ªè qua x√°c th·ª±c ch·ª©ng ch·ªâ SSL (CH·ªà D√ôNG KHI TEST LOCALHOST)
            TrustManager[] trustAllCerts = new TrustManager[]{
                new X509TrustManager() {
                    @Override
                    public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                        return null;
                    }

                    @Override
                    public void checkClientTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                    }

                    @Override
                    public void checkServerTrusted(java.security.cert.X509Certificate[] certs, String authType) {
                    }
                }
            };

            // Thi·∫øt l·∫≠p context SSL tin t·∫•t c·∫£ ch·ª©ng ch·ªâ
            SSLContext sc = SSLContext.getInstance("TLS");
            sc.init(null, trustAllCerts, new java.security.SecureRandom());
            HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());

            // B·ªè qua ki·ªÉm tra hostname (d√πng cho localhost)
            HostnameVerifier allHostsValid = (hostname, session) -> true;
            HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);

            // G·ª≠i POST t·ªõi server
            URL url = new URL("https://localhost:8443");
            HttpsURLConnection conn = (HttpsURLConnection) url.openConnection();
            conn.setDoOutput(true); // Cho ph√©p ghi d·ªØ li·ªáu
            conn.setRequestMethod("POST");
            conn.setRequestProperty("Content-Type", "application/json");

            // G·ª≠i JSON
            try (OutputStream os = conn.getOutputStream()) {
                os.write(jsonPayload.getBytes(StandardCharsets.UTF_8));
            }

            // ƒê·ªçc ph·∫£n h·ªìi t·ª´ server
            InputStream is = conn.getInputStream();
            String response = new String(is.readAllBytes(), StandardCharsets.UTF_8);
            resultArea.setText("üì• Server ph·∫£n h·ªìi:\n" + response);
        } catch (Exception ex) {
            resultArea.setText("‚ùå L·ªói khi g·ª≠i: " + ex.getMessage());
        }
    }
}
